function add(e,i){return e instanceof Complex?i instanceof Complex?new Complex(e.re+i.re,e.im+i.im):new Complex(e.re+i,e.im):i instanceof Complex?add(i,e):new Complex(e+i,0)}function prod(e,i){if(e instanceof Complex){if(i instanceof Complex){let t=new Complex(0,0);return t.re=e.re*i.re-e.im*i.im,t.im=e.re*i.im+e.im*i.re,t}return new Complex(e.re*i,e.im*i)}return i instanceof Complex?multiply(i,e):new Complex(e*i,0)}function divide(e,i){if(e instanceof Complex){let t=new Complex(e.re,e.im);return t.div(i),t}if(i instanceof Complex){let t=new Complex(i.re,i.im);return t.inv(),prod(e,t)}return e/i}class Complex{constructor(e,i){this.re=e,this.im=i}abs(){return Math.sqrt(this.re**2+this.im**2)}arg(){return Math.atan2(this.im,this.re)}conj(){this.im=-this.im}add(e){e instanceof Complex?(this.re+=e.re,this.im+=e.im):this.re+=e}multiply(e){if(e instanceof Complex){let i=this.re;this.re=i*e.re-this.im*e.im,this.im=i*e.im+this.im*e.re}else this.re*=e,this.im*=e}div(e){if(e instanceof Complex){let i=new Complex(e.re,e.im);i.inv(),this.multiply(i)}else this.multiply(1/e)}inv(){let e=1/this.abs(),i=-this.arg();this.re=e*Math.cos(i),this.im=e*Math.sin(i)}}export{Complex,add,prod,divide};